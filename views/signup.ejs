<%- include('./commonComponents/header') %>
<script src="./javascripts/md5.min.js"></script>
<style>
    .el-header, .el-footer {
        background-color: #B3C0D1;
        color: #333;
        text-align: center;
        line-height: 60px;
    }

    .el-aside {
        background-color: #D3DCE6;
        color: #333;
        text-align: center;
        line-height: 200px;
    }

    .el-main {
        background-color: #E9EEF3;
        color: #333;
        text-align: center;
        line-height: 400px;

    }

    body > .el-container {
        margin-bottom: 40px;
        flex: border-box;

    }

    .el-container:nth-child(5) .el-aside,
    .el-container:nth-child(6) .el-aside {
        line-height: 260px;
    }

    .el-container:nth-child(7) .el-aside {
        line-height: 320px;
    }
</style>
</head>
<body>

<div id="app">
    <el-container>
        <el-header>注册</el-header>
        <el-main>
            <el-form :model="signupForm" status-icon :rules="rule" ref="signupForm" label-width="100px"
                     class="demo-ruleForm">
                <el-form-item label="用户名" prop="username" required>
                    <el-input v-model="signupForm.username" autocomplete="off"></el-input>
                </el-form-item>
                <el-form-item label="邮箱" prop="mail" required>
                    <el-input v-model="signupForm.mail" autocomplete="off"></el-input>
                </el-form-item>
                <el-form-item label="密码" prop="pass" required>
                    <el-input type="password" v-model="signupForm.pass" autocomplete="off"></el-input>
                </el-form-item>
                <el-form-item label="确认密码" prop="checkPass" required>
                    <el-input type="password" v-model="signupForm.checkPass" autocomplete="off"></el-input>
                </el-form-item>
                <el-form-item label="备注信息" prop="info">
                    <el-input v-model="signupForm.info"></el-input>
                </el-form-item>
                <el-form-item>
                    <el-button type="primary" @click="submitForm('signupForm')">注册</el-button>
                    <el-button @click="resetForm('signupForm')">重置</el-button>
                </el-form-item>
            </el-form>
        </el-main>
    </el-container>
</div>

<script>
  //用户名，密码，邮箱，个人信息
  // TODO: 用户名校验，邮箱正则校验

  new Vue({
    el: '#app',
    data() {
      let validateMail = (rule, value, callback) => {
        if (value === '') {
          callback(new Error('请输入邮箱'));
        } else {
          let mailPattern = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
          if (mailPattern.test(value) === false) {
            callback(new Error('邮箱格式不正确'));
          }
          callback();
        }
      };
      let validatePass = (rule, value, callback) => {
        if (value === '') {
          callback(new Error('请输入密码'));
        } else {
          if (this.signupForm.checkPass !== '') {
            this.$refs.signupForm.validateField('checkPass');
          }
          callback();
        }
      };
      let validatePass2 = (rule, value, callback) => {
        if (value === '') {
          callback(new Error('请再次输入密码'));
        } else if (value !== this.signupForm.pass) {
          callback(new Error('两次输入密码不一致!'));
        } else {
          callback();
        }
      };
      return {
        signupForm: {
          username: '',
          mail: '',
          pass: '',
          checkPass: '',
          info: ''
        },
        rule: {
          mail: [
            {validator: validateMail, trigger: 'blur'}
          ],
          pass: [
            {validator: validatePass, trigger: 'blur'}
          ],
          checkPass: [
            {validator: validatePass2, trigger: 'blur'}
          ],
        }
      };
    },
    methods: {
      submitForm(formName) {
        this.$refs[formName].validate((valid) => {
          if (valid) {
            let regName = this.signupForm.username;
            let regPassword = this.signupForm.pass;
            let regMail = this.signupForm.mail;
            let regInfo = this.signupForm.info;
            axios({
              method: 'post',
              url: '/api/register',
              data: {
                regName: regName,
                regPassword: regPassword,
                regMail: regMail,
                regInfo: regInfo
              },
            })
                .then((res) => {
                  console.log(res)
                  if (res.data.register === true) {
                    this.$message({
                      message: '恭喜你，注册成功，正在跳转登录界面...',
                      type: 'success',
                      duration: 1000,
                      onClose: () => {
                        window.location.href = "/login";    //    请求成功后到你的主页
                        // setTimeout(() =>{
                        //   window.location.href="/";    //    请求成功后到你的主页
                        // },1000)
                      }
                    });
                  }
                })
                .catch((error) => {
                  this.$message.error(`注册失败，失败原因:${error}`);
                });
          } else {
            this.$message.error(`输入不合法，请重新输入`);
            return false;
          }
        });
      },
      resetForm(formName) {
        this.$refs[formName].resetFields();
      },
    }
  })
</script>
<%- include('./commonComponents/footer') %>